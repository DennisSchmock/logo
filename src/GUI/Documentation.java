/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

/**
 *
 * @author dennisschmock
 */
public class Documentation extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public Documentation() {
        initComponents();
        this.setDefaultCloseOperation(1);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 323, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 223, Short.MAX_VALUE)
        );

        jEditorPane1.setEditable(false);
        jEditorPane1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jEditorPane1.setText("*****BASIC COMMANDS*****\n\nFD XX- Forward Draw, the ant forward the number of pixels you define, drawing a line. Accepts Decimals\nSyntax: FD 10 OR BK 10.5\n\nBK XX- Backwards Draw, moves the ant backward the number of pixels you define, drawing a line. Accepts Decimals\nSyntax: BK 10 or BK 10.5\n\nRT XX- Right Turn. Turns the ant right the degree you specify. Accepts Decimals\nSyntax: RT 90 OR 0.5\n\nLT XX - Left Turn. Turns the ant left the degree you specify.\nSyntax: LT 90\n\nMF XX - Move Forward without drawing a line, the number of pixels you define. \nSyntax: MF 90\n\nMB XX - Move Backwards without drawing a line, the number of pixels you define.\nSyntax: MB 90\n\nMoveTo X,Y - moves the ant to your specified coordinate. \nSyntax: MoveTo 200,300\n\nTurnTo XX - turns the Ant the direction you choose, 0 and 360 being straight North. \nSyntax: TurnTo 90\n\nColor X - Change the color to a predefined color between 0 and 12.\nSyntax: Color 5  \n0 - Black\n1 - Blue\n2 - Cyan\n3 - Dark Gray\n4 - Gray\n5 - Green\n6 - Light Gray\n7 - Maganta\n8 - Orange\n9 - Pink\n10 - Red\n11- White\n12 - Yellow\n\nColor R,G,B - Blend your own color fra Red, Green and Blue. Use values between 0 and 255 to control how much of a color you use. 255,255,255 Will give you WHITE, and 0,0,0 will give you BLACK\nSyntax: Color 100,100,100\n\nBackground XX OR Background R,G,B - same as Color, but change the color of the background instead. Will delete whatever you drew on the canvas. \n\n*****ADVANCED COMMANDS*****\n\n***Variables***\nLet abe 100 - This will make a variable of the name Abe which holds the value 100. \nThe Variable can be use together with commands.\n\nLET distance 100 <- distance is now equal 100\nFD distance <- the ant will draw a line of 100\n\n**Change the Variable**\nTo change the variable, use LET again.\nExample: \n\nLet abe 100 <- Value of abe is now 100\nFD abe <- Draw a line of 100\nLET abe 50 <- Value of abe is now 50\n\n***Expressions***\nYou can use expressions wherever you use a parameter. \nExample: \nLET abe 100\nFD abe*2 (abe is 100, so you will draw a line of 100*2)\n\nthe following operators are supported:\n\t•\tAddition: '2 + 2'\n\t•\tSubtraction: '2 - 2'\n\t•\tMultiplication: '2 * 2'\n\t•\tDivision: '2 / 2'\n\t•\tExponential: '2 ^ 2'\n\t•\tUnary Minus,Plus (Sign Operators): '+2 - (-2)'\n\t•\tModulo: '2 % 2'\nthe following functions are supported:\n\t•\tabs: absolute value\n\t•\tacos: arc cosine\n\t•\tasin: arc sine\n\t•\tatan: arc tangent\n\t•\tcbrt: cubic root\n\t•\tceil: nearest upper integer\n\t•\tcos: cosine\n\t•\tcosh: hyperbolic cosine\n\t•\texp: euler's number raised to the power (e^x)\n\t•\tfloor: nearest lower integer\n\t•\tlog: logarithmus naturalis (base e)\n\t•\tlog2: logarithm to base 2\n\t•\tlog10: logarithm to base 10\n\t•\tsin: sine\n\t•\tsinh: hyperbolic sine\n\t•\tsqrt: square root\n\t•\ttan: tangent\n\t•\ttanh: hyperbolic tangent\n\n*****CONTROL STRUCTURES*****\n\nREPEAT xx - repeats the commands inside the scope for XX times.\nSyntax:\n\nREPEAT 4\t<-Repeat four times\nFD 100\t<-Go forward 100\nRT 90\t\t<-Turn right 90\nREPEAT END\t<-Go to repeat start if there are still iterations left\nYou can make a nested loop this way:\nREPEAT 4 <-Outer loop. Executes 4 times\nFD 100\nREPEAT 4 <-Inner loop. Executes 4 times each time it is hit. In this case, 16 times in total.\nFD 10\nRT 90\nREPEAT END <-end of inner loop\nREPEAT END <-end of outer loop\n\nThere is not theoretical limit on how many loops can be nested inside each other.\n\nIF Expression - Will execute commands inside the IF <-> IF END scope only if the expression returns true. \nExample\nIF 1<4 \t\t<-Returns true, since 1 IS smaller than 4. \nFD 100\t<-Forward 100\nIF END\t<-End of if statement. \n\nIF 1>4 \t\t<-Returns FALSE, since 1 IS not bigger than 4. \nFD 100\t<-Skips this\nIF END\t<-End of if statement. \n\n*****PROCEDURES*****\n\nProcedures are small functions that executes code defined inside it, when called. \n\nDeclaring a simple procedure:\n\nDECLARE square\nREPEAT 4\nFD 100\nRT 90\nREPEAT END\nDECLARE END\n\nTo call the procedure you put in the following command in your code:\nCALL Square\n\nThis will execute the code inside the declaration of the square.\n\nDeclare an advanced procedure\n\nProcedures can use parameters\n\nExample with Square:\n\nDECLARE square size\nREPEAT 4\nFD size\nRT 90\nDECLARE END\n\nWhen you declare a procedure with a parameter you MUST use the parameter when you call it, or your code will fail. \nExample:\nCALL square 100\n\nThis will paint a square with sides of 100.\nA procedure can hold more than one parameter:\n\nDECLARE polygon size angles\nREPEAT angles\nFD size\nrt 360/angles\nREPEAT END\nDECLARE END\n\nIf using more than one parameter you MUST use all parameters when calling it:\nExample:\nCALL polygon 100 8\n\nThis will paint a octagon with sides of a 100.\n\n***Recursive calls***\nA method can call itself (recursively). \n\nExample:\nDECLARE square l d <-procedure declaration\nIF d>0 <Procedure baseline.\nREPEAT 4\nFD l\nRT 90\nCALL square l*0.4 d-1 <-Recursive call\nREPEAT end\nIF end\nDECLARE end\n\nCALL square 200 6\n\nThis will produce a small fractal with Squares inside squares. \n");
        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1025, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(354, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(360, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(262, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(268, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Documentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Documentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Documentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Documentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Documentation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
